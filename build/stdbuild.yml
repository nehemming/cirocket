
params:
  - name: resDir
    value: build
  - name: distDir
    value: '.dist'
  - name: artifactsDir
    value: .artifacts

  # - name: includeChangeLog
  #   value: yes
  # - name: includePackages
  #   value: yes
  # - name: includeDocker
  #   value: yes
  # - name: includeBrews
  #   value: yes
  # - name: homebrewTap
  #   value: 'homebrew-tap'

  # - name: projectName
  #   value: <<PROJECTNAME>>
  # - name: description
  #   value: '<<DESCRIPTIN>>'
  # - name: builtBy
  #   value: '<<BUILDER>>'
  # - name: repoUser
  #   value: '<<USER>>'
  # - name: license
  #   value: 'Apache 2.0'


sequences:
  - local:
    - initalise
    - validate
    - credits
    - snapshot_release
    - tag_display
    - cleanup

  - release:
    - initalise
    - validate
    - credits
    - release
    - tag_display
    - cleanup

  - cirelease:
    - initalise
    - validate
    - credits
    - release
    - tag_display
    - cleanup

  - cicommit:
    - initalise
    - validate
    - tag_display
    - cleanup

stages:
  - name: initalise
    tasks:
      - type: mkdir
        name: create the artifacts dir
        log: true
        dirs:
          - '{{ .artifactsDir }}'

  # validate checks a build passes tests and lint checks
  - name: validate
    tasks:
      - name: go mod tidy 
        type: run
        command: 'go mod tidy'
      - name: go test 
        type: run
        command: 'go test ./...'
        logStdOut: true
      - name: go lint 
        type: run
        command: 'golangci-lint run'
      - name: go list modules 
        type: run
        command: 'go list -json -m all'
        output: '{{ .artifactsDir }}/list.tmp'
      - name: nancy
        type: run
        command: 'nancy sleuth --quiet'
        input: '{{ .artifactsDir }}/list.tmp'
        logStdOut: true

  # credits updates the credits document using the mod list
  - name: credits
    tasks:
      - name: credits
        type: run
        command: 'gocredits'
        output: 'CREDITS'

  # release releases the project using goreleaser
  - name: snapshot_release
    params:
      - name: goreleaserCfg
        value: '{{ .artifactsDir }}/goreleaser.tmp'
      - name: dockerfile
        value: '{{ .resDir }}//Dockerfile.release'
      - name: releaseHeader
        optional: true
        skipTemplate: true
        file: '{{ .resDir }}/header.tplt'
      - name: releaseFooter
        optional: true
        skipTemplate: true
        file: '{{ .resDir }}/footer.tplt'
    tasks:
      - name: prepare release script
        type: template
        delims:
          left: '[['
          right: ']]'
        template: '{{ .resDir }}/goreleaser.ytpl'
        output: '{{ .goreleaserCfg }}'

      - name: go releaser
        type: run
        command: 'goreleaser {{ .args }} --config {{ .goreleaserCfg }}'
        params:
          - name: args
            value: '--snapshot --skip-publish --rm-dist'
        env:
          REPO_USER: '{{ .repoUser }}'

  - name: release
    params:
      - name: goreleaserCfg
        value: '{{ .artifactsDir }}/goreleaser.tmp'
      - name: includeChangeLog
        value: yes
      - name: dockerfile
        value: '{{ .resDir }}/Dockerfile.release'
      - name: releaseHeader
        optional: true
        skipTemplate: true
        file: '{{ .resDir }}/header.tplt'
      - name: releaseFooter
        optional: true
        skipTemplate: true
        file: '{{ .resDir }}/footer.tplt'

    tasks:
      - name: prepare release script
        type: template
        delims:
          left: '[['
          right: ']]'
        template: '{{ .resDir }}/goreleaser.ytpl'
        output: '{{ .goreleaserCfg }}'

      - name: go releaser
        type: run
        command: 'goreleaser {{ .args }} --config {{ .goreleaserCfg }}'
        params:
          - name: args
            value: '--rm-dist'
        env:
          REPO_USER: '{{ .repoUser }}'
          GITHUB_TOKEN: '{{ .Env.SECURE_GITHUB_TOKEN }}'

  # tag lists the current build tag
  - name: tag_display
    tasks:
      - name: next tag
        try: true
        type: run
        command: 'svu'
        logStdOut: true

  # cleanup cleans up artifacts
  - name: cleanup
    tasks:
      - name: cleanup artifactsDir
        type: cleaner
        files:
          - '{{ .artifactsDir }}'