<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cirocket â€“ Missions</title>
    <link>https://nehemming.github.io/cirocket/docs/reference/missions/</link>
    <description>Recent content in Missions on cirocket</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://nehemming.github.io/cirocket/docs/reference/missions/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Include</title>
      <link>https://nehemming.github.io/cirocket/docs/reference/missions/include/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nehemming.github.io/cirocket/docs/reference/missions/include/</guid>
      <description>
        
        
        &lt;h2 id=&#34;path&#34;&gt;path&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; is used to locate the file to include in the configuration.&lt;/p&gt;
&lt;p&gt;The path may be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local file with a path relative to the configuration file where the include definition&lt;/li&gt;
&lt;li&gt;absolute operating system file path&lt;/li&gt;
&lt;li&gt;File url using the &lt;code&gt;file:/path&lt;/code&gt; or &lt;code&gt;file:///path&lt;/code&gt; notation.&lt;/li&gt;
&lt;li&gt;Http(s) Url to locate a resource remotely on the web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Include files can be nested.  When nested the relative path will be appended too the parents path.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Include paths are not template expanded.  This behavior differs from most other path properties that do support expansion.  However as includes are expanded prior to any processing taking place they cannot support expansion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;url&#34;&gt;url&lt;/h2&gt;
&lt;p&gt;This property is deprecated.  Future versions will remove.&lt;/p&gt;
&lt;p&gt;It behaves identically to the &lt;code&gt;path&lt;/code&gt; property.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Mission</title>
      <link>https://nehemming.github.io/cirocket/docs/reference/missions/mission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nehemming.github.io/cirocket/docs/reference/missions/mission/</guid>
      <description>
        
        
        &lt;p&gt;Missions are run in two phases.  Firstly all the configuration is prepared then once complete the mission stage and task operations are executed.&lt;/p&gt;
&lt;h3 id=&#34;basicenv&#34;&gt;basicEnv&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are not template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;basicEnv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;THRUSTERS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO{{Not expanded}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TELEMETRY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;
&lt;p&gt;Free text description of the mission.&lt;/p&gt;
&lt;p&gt;This property, along with comments can be used to document the mission.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;env&#34;&gt;env&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;p&gt;All Environment variables are loaded prior to params.&lt;/p&gt;
&lt;p&gt;The mission inherits the environment variables passed into the &lt;code&gt;circoket&lt;/code&gt; application.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;basicEnv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;THRUSTERS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO {{ .Env.PATH }} // GO + expanded PATH environment variable&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TELEMETRY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;includes&#34;&gt;includes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;includes&lt;/code&gt; property is a list of include file definitions. The mission can load and merge include files from either local paths or from web urls.  Include files are merged into the parent file such tat parent definitions take prescience.&lt;/p&gt;
&lt;p&gt;Include files can be nested.  The path to the include file is assumed to be relative to their parent&amp;rsquo;s include location.  When a included configuration references a relative resource, such as a param value file, its location is assumed relative to the &lt;code&gt;cirocket&lt;/code&gt; working directory.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/include/&#34;&gt;Include definition&lt;/a&gt; for more info.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;includes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;https://raw.githubusercontent.com/nehemming/cirocket-config/master/build/stdbuild.yml&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;must&#34;&gt;must&lt;/h3&gt;
&lt;p&gt;List of parameters that must be passed into the mission.  If any of the parameters are missing the mission will fail preparation and no stage or &lt;code&gt;onFail&lt;/code&gt; stage will be run.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;must&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;secret_token&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;name&#34;&gt;name&lt;/h3&gt;
&lt;p&gt;Name of the mission.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;onfail&#34;&gt;onFail&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;onFail&lt;/code&gt; property defines a stage to run if during the mission execution phase an error occurs.   The stage can be used to perhaps clean up resources etc.   The onFail stage is not run if the mission fails during the preparation phase.  This is because all preparation completes prior to the first stage executing.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;params&#34;&gt;params&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; property is a map of param definitions.  Params are readonly values that are template expanded during the preparation phase of a mission.&lt;/p&gt;
&lt;p&gt;When params are expanded they have access to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environment variables passed in from the &lt;code&gt;cirocket&lt;/code&gt; environment not overwritten by &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries&lt;/li&gt;
&lt;li&gt;environment variables defined in &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries.&lt;/li&gt;
&lt;li&gt;params passed into the application and any defined in the mission definition prior to the one being expanded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/param/&#34;&gt;Param definition&lt;/a&gt; for more info.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;sequences&#34;&gt;sequences&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Sequences&lt;/code&gt; property is a list of sequence definitions.  A sequence is a key named order list of stages to run.   Many different sequences can be defined.  Each must have a unique key name and one or more stages to execute.  If a sequence is defined for a mission the application caller must provide at least one sequence key name on the command line.  If they do not an error will be raised and the mission will fail during the prepare stage.   If no sequence definition is present, stages in the mission will all be executed iin the order they are defined.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;sequences&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;initialise&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;credits&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;goreleaser&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;tag_display&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;cleanup&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;coverage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;initialise&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;validate&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;coverage&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;cleanup&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stages&#34;&gt;stages&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;stages&lt;/code&gt; property is a list of mission stage definitions.  All missions are required to have one or more stages.&lt;/p&gt;
&lt;p&gt;If no &lt;code&gt;sequence&lt;/code&gt; property is defined thn stages are executed in the order they are specified in the file.   otherwise the order stages are executed is determined by the command line sequence arguments.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;version&#34;&gt;version&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;version&lt;/code&gt; property indicates the version of the mission file being used.  Currently this value is ignored.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Param</title>
      <link>https://nehemming.github.io/cirocket/docs/reference/missions/param/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nehemming.github.io/cirocket/docs/reference/missions/param/</guid>
      <description>
        
        
        &lt;p&gt;A param definition defines a read only variable used by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/mission/&#34;&gt;Missions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/stage/&#34;&gt;Stages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/task/&#34;&gt;Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;description&lt;/code&gt; property is a free text description of a parameter.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;name&#34;&gt;name&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; parameter is the unique key name of the parameter.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;filter&#34;&gt;filter&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; property is an optional filter on the param.
If the filter criteria are not met the param value will not be set.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;optional&#34;&gt;optional&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;optional&lt;/code&gt; is true (yes|1) no error will be produced if no file can be loaded from the &lt;code&gt;path&lt;/code&gt;.  The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;path&#34;&gt;path&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt;is the location of a resource that can provide the parameter&amp;rsquo;s value.
Paths may be either a local file system path or a url to file or http(s) resource.
If both Path and Value are supplied the resource value will be appended to the Value.
Template expressions can be used in the path.  The template is expanded to get the
location of the resource.&lt;/p&gt;
&lt;p&gt;If the resource is successfully located it is appended to the Value property.
If SkipExpand is false the combined value will be processed as a template to
obtain the final value.   If SkipExpand is true the combined value will be used without
any additional expansion.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;print&#34;&gt;print&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;print&lt;/code&gt; is true (yes|1) the param name and value will be logged.  The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;skipexpand&#34;&gt;skipExpand&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;skipExpand&lt;/code&gt; is true (yes|1) the value and any file read from &lt;code&gt;path&lt;/code&gt; will not be template expanded.  The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note, The path value will always be expanded.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;value&#34;&gt;value&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; property contain the value of the parameter. Unless &lt;code&gt;skipExpand&lt;/code&gt; is true the value will be template expanded.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes (subject to &lt;code&gt;skipExpand&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Stage</title>
      <link>https://nehemming.github.io/cirocket/docs/reference/missions/stage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nehemming.github.io/cirocket/docs/reference/missions/stage/</guid>
      <description>
        
        
        &lt;h3 id=&#34;basicenv&#34;&gt;basicEnv&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are not template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;p&gt;The variables are scoped to the specific stage, but inherited by all its tasks.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;basicEnv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;THRUSTERS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO{{Not expanded}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TELEMETRY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;
&lt;p&gt;Free text description of the stage.&lt;/p&gt;
&lt;p&gt;This property, along with comments can be used to document the stage.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dir&#34;&gt;dir&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;dir&lt;/code&gt; property optionally specifies the directory in which the stage should be rum.&lt;/p&gt;
&lt;p&gt;if the directory does not exist an error will be raised.&lt;/p&gt;
&lt;p&gt;Once the stage has completed the parent directory will be restored.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;env&#34;&gt;env&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;p&gt;All Environment variables are loaded prior to params.&lt;/p&gt;
&lt;p&gt;The stage inherits the mission&amp;rsquo;s environment variables.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;filter&#34;&gt;filter&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; property is an optional filter on the stage.
If the filter criteria are not met the stage will be skipped.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;if&#34;&gt;if&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; condition is evaluated immediately prior to starting execution of the stage&amp;rsquo;s operations.   If the supplied expression does not evaluate to a boolean &lt;code&gt;true&lt;/code&gt; expression the stage will be skipped.&lt;/p&gt;
&lt;p&gt;When no &lt;code&gt;if&lt;/code&gt; property is supplied the stage will default the &lt;code&gt;if&lt;/code&gt; condition to true.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;must&#34;&gt;must&lt;/h3&gt;
&lt;p&gt;List of parameters that must be passed into the stage from the mission.  If any of the parameters are missing the stage will fail preparation no stage or &lt;code&gt;onFail&lt;/code&gt; stage will be run.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;name&#34;&gt;name&lt;/h3&gt;
&lt;p&gt;Name of the stage.  If supplied the name must be unique across all stages.  Stages that are not named are refereed to by their ordinal position in the list of stages.  If unnamed stages cannot be used with sequences.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notrust&#34;&gt;noTrust&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;noTrust&lt;/code&gt; property indicates the stage should not inherit environment variables or parameters from its parent.&lt;br&gt;
This can be used with a  stage where you do not want the subtasks to receive API tokens etc. that are stored in the parents environment.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;onfail&#34;&gt;onFail&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;onFail&lt;/code&gt; property defines a task to run if during the stage&amp;rsquo;s execution phase an error occurs.   The task can be used to perhaps clean up resources etc.   The onFail task is not run if the stage fails during the preparation phase.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;params&#34;&gt;params&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; property is a map of param definitions.  Params are readonly values that are template expanded during the preparation phase of a mission.&lt;/p&gt;
&lt;p&gt;When params are expanded they have access to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environment variables passed from the mission and not overwritten by &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries&lt;/li&gt;
&lt;li&gt;environment variables defined in &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries.&lt;/li&gt;
&lt;li&gt;params passed from the mission.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/param/&#34;&gt;Param definition&lt;/a&gt; for more info.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ref&#34;&gt;ref&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; property allows a stage to reference another stage&amp;rsquo;s definition.  If a &lt;code&gt;ref&lt;/code&gt; property is provided it mast identity another named stage.  If the stage referenced does not exist the mission wll fail at the prepare phase.&lt;/p&gt;
&lt;p&gt;When a target stage ref&amp;rsquo;s another stage the properties of the referenced stage are copied  and merged into the target stage&amp;rsquo;s properties.  Any properties defined in the target stage take precedence over the referenced stage.  Stages references are transitive so a referenced stage may reference other stages.   The mission fails if a circular reference is detected however.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; property is useful to avoid needing to repeat definitions for the onFail stage etc.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tasks&#34;&gt;tasks&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;tasks&lt;/code&gt; property iis a list of one or more tasks to execute.
Tasks are executed sequentially&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Task</title>
      <link>https://nehemming.github.io/cirocket/docs/reference/missions/task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nehemming.github.io/cirocket/docs/reference/missions/task/</guid>
      <description>
        
        
        &lt;h3 id=&#34;task-varieties&#34;&gt;Task varieties&lt;/h3&gt;
&lt;p&gt;Tasks are run by stages.   There are four varieties of task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type tasks&lt;/li&gt;
&lt;li&gt;Collection tasks
&lt;ul&gt;
&lt;li&gt;Group&lt;/li&gt;
&lt;li&gt;Try&lt;/li&gt;
&lt;li&gt;Concurrent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Type tasks use a &lt;code&gt;type&lt;/code&gt; property to identify the specific type of task being executed. The collection tasks all contain one or more task definitions.   Tope level stage tasks inherit parameters and  environment variables from the stage.  Sub tasks of a collection task inherit the parameters and environment variables the collection.   In this way parameters and environment definitions are hierarchical where child nodes in the tree can replace values provided by their parents.&lt;/p&gt;
&lt;p&gt;All tasks, regardless of variety or type share a set of common properties.   Additional properties can be defined for each variety and type task implementations can add their own additional configuration properties.&lt;/p&gt;
&lt;h3 id=&#34;variable-types&#34;&gt;Variable types&lt;/h3&gt;
&lt;p&gt;There are three different types of variable storage in &lt;code&gt;ciirocket&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Environment variables.  Inherited from the shell process Environment variables and passed into child processes.  Environment variables are evaluated at prepare time.  (The &lt;code&gt;run&lt;/code&gt; task type reevaluates variables immediately prior to executing ht sub process.)   The variables are readonly once defined.  The &lt;code&gt;env&lt;/code&gt; definitions are template expanded, but only have access to parent params.&lt;/li&gt;
&lt;li&gt;Parameters are read only values either passed into the program as command line arguments or defined in configuration.   Parameters are evaluated during the preparation phase.   Values are scoped to the specific item defining them and their child definitions. Iif a child sets a new value for a parameter it does not effect their parent or sibling&amp;rsquo;s values.&lt;/li&gt;
&lt;li&gt;Variables are dynamic values evaluated before, during or after a task&amp;rsquo;s execution phase.  Variables can be used to share output from a task with its parent&amp;rsquo;s and sibling tasks.  Th &lt;code&gt;prevars&lt;/code&gt; are evaluated after the prepare phase but prior to executing a task.  The values are local to the task.  The &lt;code&gt;postvars&lt;/code&gt; are evaluated after the task has executed and are shared with the parent and sibling tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Variables are not defined during the prepare phase so should not be used as part of a &lt;code&gt;env&lt;/code&gt; or &lt;code&gt;param&lt;/code&gt; template value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;common-task-properties&#34;&gt;Common Task Properties&lt;/h2&gt;
&lt;h3 id=&#34;basicenv&#34;&gt;basicEnv&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are not template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;p&gt;The variables are scoped to the specific task.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;basicEnv&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;THRUSTERS&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO{{Not expanded}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;TELEMETRY&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;
&lt;p&gt;Free text description of the task.&lt;/p&gt;
&lt;p&gt;This property, along with comments can be used to document the task.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;env&#34;&gt;env&lt;/h3&gt;
&lt;p&gt;Map of environment variables where the values are template expanded.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;basicEnv&lt;/code&gt; variables are loaded prior to the &lt;code&gt;env&lt;/code&gt; variables.  The &lt;code&gt;env&lt;/code&gt; value takes prescience`&lt;/p&gt;
&lt;p&gt;All Environment variables are loaded prior to params.&lt;/p&gt;
&lt;p&gt;The task inherits the stage&amp;rsquo;s environment variables.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;exports&#34;&gt;exports&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;exports&lt;/code&gt; definition is a list of variables that should be shared with as variables with their parent and sibling tasks.   All &lt;code&gt;postvars&lt;/code&gt; are exported automatically, but the &lt;code&gt;prevars&lt;/code&gt; need to be listed in the &lt;code&gt;exports&lt;/code&gt; section to be shared with parents/siblings.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;filter&#34;&gt;filter&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; property is an optional filter on the stage.
If the filter criteria are not met the task will be skipped.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;if&#34;&gt;if&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; condition is evaluated immediately prior to starting execution of the task&amp;rsquo;s operations.   If the supplied expression does not evaluate to a boolean &lt;code&gt;true&lt;/code&gt; expression the task will be skipped.&lt;/p&gt;
&lt;p&gt;When no &lt;code&gt;if&lt;/code&gt; property is supplied the task will default the &lt;code&gt;if&lt;/code&gt; condition to true.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;must&#34;&gt;must&lt;/h3&gt;
&lt;p&gt;List of parameters that must be passed into the task from the stage or task parent.  If any of the parameters are missing the task will fail preparation and no stage, task or &lt;code&gt;onFail&lt;/code&gt; will be run.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;name&#34;&gt;name&lt;/h3&gt;
&lt;p&gt;Name of the task.  If supplied the name must be unique across all tasks sharing the same parent task or stage.&lt;br&gt;
Tasks that are not named are refereed to by their ordinal position in the list of tasks.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;notrust&#34;&gt;noTrust&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;noTrust&lt;/code&gt; property indicates the task should not inherit environment variables or parameters from its parent.&lt;br&gt;
This can be used with a &lt;code&gt;run&lt;/code&gt; task where you do not want the child process to receive API tokens etc. that are stored in the parent environment.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;params&#34;&gt;params&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; property is a map of param definitions.  Params are readonly values that are template expanded during the preparation phase of a mission.&lt;/p&gt;
&lt;p&gt;When params are expanded they have access to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environment variables passed from the stage or task parent and not overwritten by &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries&lt;/li&gt;
&lt;li&gt;environment variables defined in &lt;code&gt;basicEnv&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; entries.&lt;/li&gt;
&lt;li&gt;params passed from the task&amp;rsquo;s parent stage or task.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;https://nehemming.github.io/cirocket/cirocket/docs/reference/missions/param/&#34;&gt;Param definition&lt;/a&gt; for more info.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;prevars&#34;&gt;prevars&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;prevars&lt;/code&gt; property is map of variable key names and temp;ate expanded values that are evaluated after the prepare phase has completed but before the defining task has started execution.   The variables are local to the defining task and any child tasks that it may have.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;postvars&#34;&gt;postvars&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;postvars&lt;/code&gt; property is map of variable key names and temp;ate expanded values that are evaluated after the task has successfully completed.   The variables are exported and shared with their parent and sibling tasks.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ref&#34;&gt;ref&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; property allows a task to reference another task&amp;rsquo;s definition.  If a &lt;code&gt;ref&lt;/code&gt; property is provided it mast identity another named task. The target and referenced task must share the same immediate parent.  If the task referenced does not exist the mission wll fail at the prepare phase.&lt;/p&gt;
&lt;p&gt;When a target task references another task the properties of the referenced task are copied and merged into the target task&amp;rsquo;s properties.  Any properties defined in the target task take precedence over the referenced task.  Tasks references are transitive so a referenced task may reference other tasks.   The mission fails if a circular reference is detected however.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ref&lt;/code&gt; property is useful to avoid needing to repeat definitions for the onFail task etc.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;type-tasks&#34;&gt;Type Tasks&lt;/h2&gt;
&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; property identifies a task as the Type variety.  The &lt;code&gt;type&lt;/code&gt; value is the identifying name of the task type running this task.&lt;/p&gt;
&lt;p&gt;The type identifier must be registered with &lt;code&gt;cirocket&lt;/code&gt;.  Unknown task types will cause the mission to fail.&lt;/p&gt;
&lt;p&gt;Task types may define their own additional properties that can be included in the task configuration.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Type determinant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;collection-tasks&#34;&gt;Collection Tasks&lt;/h2&gt;
&lt;h3 id=&#34;concurrent&#34;&gt;concurrent&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;concurrent&lt;/code&gt; property identifies the task as being of the Concurrent variety,  A concurrent task is itself just a list of tasks to execute concurrent.   Each of the tasks will run concurrently, if a task fails &lt;code&gt;cirocket&lt;/code&gt; will attempt to cancel the other running tasks. A &lt;code&gt;concurrent&lt;/code&gt; task completes when all the child tasks have completed.&lt;/p&gt;
&lt;p&gt;All the tasks will inherit any environment or parameter settings defined in the concurrent definition.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Type determinant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;group&#34;&gt;group&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;group&lt;/code&gt; property identifies the task as being of the Group variety,  A group task is itself just a list of tasks to execute sequentially.&lt;/p&gt;
&lt;p&gt;The task group is similar to the stage &lt;code&gt;tasks&lt;/code&gt; property in that tasks will be sequentially executed in the order they are defined.  All the tasks will inherit any environment or parameter settings defined in the group definition.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Type determinant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;onfail&#34;&gt;onFail&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;onFail&lt;/code&gt; property defines a task to run if during a group task&amp;rsquo;s execution phase an error occurs.   The task can be used to perhaps clean up resources etc.   The onFail task is not run if the stage fails during the preparation phase.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;onFail&lt;/code&gt; only applies to group and concurrent tasks, other task types will ignore this property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;try&#34;&gt;try&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;try&lt;/code&gt; property identifies the task as being of the Try variety,  A try task is itself just a list of tasks to execute sequentially.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;try&lt;/code&gt; list is similar to the &lt;code&gt;group&lt;/code&gt; list where tasks are sequentially executed in the order they are defined.  the tyy list differs that should any sub task fail the remaining tasks in the list will not be run, but no failure error will be raised and tasks proceeding the try block will continue to be run.&lt;/p&gt;
&lt;p&gt;All the tasks will inherit any environment or parameter settings defined in the group definition.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mandatory&lt;/td&gt;
&lt;td&gt;Type determinant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Template Expanded&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
